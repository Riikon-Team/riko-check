import CryptoJS from 'crypto-js';

// Thu th·∫≠p th√¥ng tin WebGL (c·ªë ƒë·ªãnh theo thi·∫øt b·ªã)
function getWebGLFingerprint() {
  try {
    const canvas = document.createElement('canvas');
    const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
    
    if (!gl) return null;
    
    const debugInfo = gl.getExtension('WEBGL_debug_renderer_info');
    if (!debugInfo) return null;
    
    return {
      vendor: gl.getParameter(debugInfo.UNMASKED_VENDOR_WEBGL),
      renderer: gl.getParameter(debugInfo.UNMASKED_RENDERER_WEBGL),
      version: gl.getParameter(gl.VERSION),
      shadingLanguageVersion: gl.getParameter(gl.SHADING_LANGUAGE_VERSION),
      maxTextureSize: gl.getParameter(gl.MAX_TEXTURE_SIZE),
      maxViewportDims: gl.getParameter(gl.MAX_VIEWPORT_DIMS),
      maxRenderbufferSize: gl.getParameter(gl.MAX_RENDERBUFFER_SIZE)
    };
  } catch (e) {
    return null;
  }
}

// Thu th·∫≠p th√¥ng tin Canvas (c·ªë ƒë·ªãnh theo thi·∫øt b·ªã)
function getCanvasFingerprint() {
  try {
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    
    // V·∫Ω text v·ªõi font ƒë·∫∑c bi·ªát
    ctx.textBaseline = 'top';
    ctx.font = '14px Arial';
    ctx.fillText('Fingerprint Canvas üé®', 2, 2);
    
    // V·∫Ω h√¨nh h·ªçc
    ctx.fillStyle = 'rgba(102, 204, 0, 0.7)';
    ctx.fillRect(100, 5, 80, 20);
    ctx.strokeStyle = 'rgba(204, 0, 0, 0.7)';
    ctx.strokeRect(100, 5, 80, 20);
    
    // V·∫Ω ƒë∆∞·ªùng cong
    ctx.beginPath();
    ctx.moveTo(20, 20);
    ctx.lineTo(80, 20);
    ctx.lineTo(50, 40);
    ctx.closePath();
    ctx.fillStyle = 'rgba(0, 0, 204, 0.7)';
    ctx.fill();
    
    return canvas.toDataURL();
  } catch (e) {
    return null;
  }
}

// Thu th·∫≠p th√¥ng tin Audio (c·ªë ƒë·ªãnh theo thi·∫øt b·ªã)
function getAudioFingerprint() {
  try {
    const audioContext = new (window.AudioContext || window.webkitAudioContext)();
    const oscillator = audioContext.createOscillator();
    const analyser = audioContext.createAnalyser();
    const gainNode = audioContext.createGain();
    const scriptProcessor = audioContext.createScriptProcessor(4096, 1, 1);
    
    gainNode.gain.value = 0; // Kh√¥ng ph√°t √¢m thanh
    oscillator.type = 'triangle';
    
    oscillator.connect(analyser);
    analyser.connect(scriptProcessor);
    scriptProcessor.connect(gainNode);
    gainNode.connect(audioContext.destination);
    
    oscillator.frequency.value = 10000;
    
    const audioData = new Float32Array(analyser.frequencyBinCount);
    analyser.getFloatFrequencyData(audioData);
    
    return {
      sampleRate: audioContext.sampleRate,
      channelCount: audioContext.destination.channelCount,
      maxChannelCount: audioContext.destination.maxChannelCount
      // B·ªè frequencyData v√¨ c√≥ th·ªÉ thay ƒë·ªïi
    };
  } catch (e) {
    return null;
  }
}

// Thu th·∫≠p th√¥ng tin Client Rects (c·ªë ƒë·ªãnh theo thi·∫øt b·ªã)
function getClientRectsFingerprint() {
  try {
    const element = document.createElement('div');
    element.style.width = '100px';
    element.style.height = '100px';
    element.style.position = 'absolute';
    element.style.top = '-9999px';
    element.style.left = '-9999px';
    
    document.body.appendChild(element);
    const rects = element.getClientRects();
    document.body.removeChild(element);
    
    return {
      length: rects.length,
      rects: Array.from(rects).map(rect => ({
        x: rect.x,
        y: rect.y,
        width: rect.width,
        height: rect.height
      }))
    };
  } catch (e) {
    return null;
  }
}

// Thu th·∫≠p th√¥ng tin Platform (ch·ªâ gi·ªØ ph·∫ßn c·ªë ƒë·ªãnh)
function getPlatformFingerprint() {
  return {
    // B·ªè userAgent v√¨ c√≥ th·ªÉ thay ƒë·ªïi khi update browser
    platform: navigator.platform,
    language: navigator.language,
    languages: navigator.languages,
    cookieEnabled: navigator.cookieEnabled,
    doNotTrack: navigator.doNotTrack,
    hardwareConcurrency: navigator.hardwareConcurrency, // C·ªë ƒë·ªãnh theo CPU
    maxTouchPoints: navigator.maxTouchPoints, // C·ªë ƒë·ªãnh theo thi·∫øt b·ªã
    vendor: navigator.vendor,
    product: navigator.product,
    productSub: navigator.productSub,
    vendorSub: navigator.vendorSub,
    buildID: navigator.buildID,
    oscpu: navigator.oscpu,
    deviceMemory: navigator.deviceMemory // C·ªë ƒë·ªãnh theo RAM
    // B·ªè connection v√¨ thay ƒë·ªïi theo m·∫°ng
  };
}

// Thu th·∫≠p th√¥ng tin Screen (c·ªë ƒë·ªãnh theo thi·∫øt b·ªã)
function getScreenFingerprint() {
  return {
    width: screen.width,
    height: screen.height,
    availWidth: screen.availWidth,
    availHeight: screen.availHeight,
    colorDepth: screen.colorDepth,
    pixelDepth: screen.pixelDepth,
    orientation: screen.orientation ? {
      type: screen.orientation.type,
      angle: screen.orientation.angle
    } : null
  };
}

// Thu th·∫≠p th√¥ng tin Timezone (c·ªë ƒë·ªãnh theo v·ªã tr√≠)
function getTimezoneFingerprint() {
  return {
    timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
    timezoneOffset: new Date().getTimezoneOffset()
    // B·ªè dateTimeFormat v√¨ c√≥ th·ªÉ thay ƒë·ªïi
  };
}

// Thu th·∫≠p th√¥ng tin Fonts (c·ªë ƒë·ªãnh theo h·ªá th·ªëng)
function getFontsFingerprint() {
  const testString = 'mmmmmmmmmmlli';
  const testSize = '72px';
  const h = document.getElementsByTagName('body')[0];
  
  const s = document.createElement('span');
  s.style.fontSize = testSize;
  s.innerHTML = testString;
  h.appendChild(s);
  
  const defaultWidth = s.offsetWidth;
  const defaultHeight = s.offsetHeight;
  
  const fonts = [
    'Arial', 'Verdana', 'Helvetica', 'Times New Roman', 'Courier New',
    'Georgia', 'Palatino', 'Garamond', 'Bookman', 'Comic Sans MS',
    'Trebuchet MS', 'Arial Black', 'Impact', 'Lucida Console',
    'Tahoma', 'Geneva', 'Lucida Sans Unicode', 'Franklin Gothic Medium',
    'Arial Narrow', 'Calibri', 'Cambria', 'Candara', 'Consolas',
    'Constantia', 'Corbel', 'Segoe UI', 'Segoe Print', 'Segoe Script'
  ];
  
  const detectedFonts = [];
  
  fonts.forEach(font => {
    s.style.fontFamily = font;
    if (s.offsetWidth !== defaultWidth || s.offsetHeight !== defaultHeight) {
      detectedFonts.push(font);
    }
  });
  
  h.removeChild(s);
  
  return detectedFonts;
}

// Thu th·∫≠p th√¥ng tin Hardware (c·ªë ƒë·ªãnh theo thi·∫øt b·ªã)
function getHardwareFingerprint() {
  return {
    // CPU cores
    cores: navigator.hardwareConcurrency,
    
    // Memory
    memory: navigator.deviceMemory,
    
    // Touch support
    touchSupport: navigator.maxTouchPoints,
    
    // Battery (n·∫øu c√≥)
    battery: navigator.getBattery ? 'supported' : 'not_supported',
    
    // Connection (ch·ªâ gi·ªØ type c·ªë ƒë·ªãnh)
    connection: navigator.connection ? {
      effectiveType: navigator.connection.effectiveType,
      downlink: navigator.connection.downlink,
      rtt: navigator.connection.rtt
    } : null
  };
}

// Thu th·∫≠p th√¥ng tin Browser (ch·ªâ gi·ªØ ph·∫ßn c·ªë ƒë·ªãnh)
function getBrowserFingerprint() {
  return {
    // Ch·ªâ gi·ªØ c√°c thu·ªôc t√≠nh c·ªë ƒë·ªãnh
    cookieEnabled: navigator.cookieEnabled,
    onLine: navigator.onLine,
    javaEnabled: navigator.javaEnabled ? navigator.javaEnabled() : false,
    
    // B·ªè c√°c thu·ªôc t√≠nh c√≥ th·ªÉ thay ƒë·ªïi
    // userAgent, appVersion, appName, appCodeName
  };
}

// T·∫°o fingerprint ho√†n ch·ªânh (ch·ªâ gi·ªØ thu·ªôc t√≠nh c·ªë ƒë·ªãnh)
export function generateFingerprint() {
  const fingerprint = {
    webgl: getWebGLFingerprint(),
    canvas: getCanvasFingerprint(),
    audio: getAudioFingerprint(),
    clientRects: getClientRectsFingerprint(),
    platform: getPlatformFingerprint(),
    screen: getScreenFingerprint(),
    timezone: getTimezoneFingerprint(),
    fonts: getFontsFingerprint(),
    hardware: getHardwareFingerprint(),
    browser: getBrowserFingerprint()
    // B·ªè timestamp v√† random v√¨ thay ƒë·ªïi m·ªói l·∫ßn
    // B·ªè c√°c thu·ªôc t√≠nh li√™n quan ƒë·∫øn session, cache, storage
  };
  
  return fingerprint;
}

// T·∫°o hash t·ª´ fingerprint v·ªõi secret key
export function hashFingerprint(fingerprint, secretKey) {
  try {
    // Chuy·ªÉn fingerprint th√†nh string
    const fingerprintString = JSON.stringify(fingerprint);
    
    // T·∫°o hash v·ªõi HMAC-SHA256
    const hash = CryptoJS.HmacSHA256(fingerprintString, secretKey);
    
    return hash.toString();
  } catch (error) {
    console.error('Error hashing fingerprint:', error);
    return null;
  }
}

// T·∫°o fingerprint v√† hash
export function createSecureFingerprint(secretKey) {
  const fingerprint = generateFingerprint();
  const hash = hashFingerprint(fingerprint, secretKey);
  
  return {
    fingerprint,
    hash,
    timestamp: Date.now() // Timestamp ch·ªâ ƒë·ªÉ tracking, kh√¥ng d√πng trong fingerprint
  };
}

// Ki·ªÉm tra fingerprint c√≥ h·ª£p l·ªá kh√¥ng
export function validateFingerprint(fingerprint, hash, secretKey) {
  const expectedHash = hashFingerprint(fingerprint, secretKey);
  return expectedHash === hash;
}

// T·∫°o fingerprint ·ªïn ƒë·ªãnh (lo·∫°i b·ªè c√°c y·∫øu t·ªë c√≥ th·ªÉ thay ƒë·ªïi)
export function generateStableFingerprint() {
  const fingerprint = generateFingerprint();
  
  // Lo·∫°i b·ªè c√°c thu·ªôc t√≠nh c√≥ th·ªÉ thay ƒë·ªïi gi·ªØa c√°c session
  const stableFingerprint = {
    webgl: fingerprint.webgl,
    canvas: fingerprint.canvas,
    audio: fingerprint.audio,
    clientRects: fingerprint.clientRects,
    platform: fingerprint.platform,
    screen: fingerprint.screen,
    timezone: fingerprint.timezone,
    fonts: fingerprint.fonts,
    hardware: fingerprint.hardware,
    browser: fingerprint.browser
  };
  
  return stableFingerprint;
}
